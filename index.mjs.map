{"version":3,"file":"index.mjs","sources":["../lib/binary.browser.js","../lib/module.js","../lib/routine.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport base64ToUint8Array from '@stdlib/string-base-base64-to-uint8array';\n\n\n// MAIN //\n\nvar wasm = base64ToUint8Array( 'AGFzbQEAAAAADwhkeWxpbmsuMAEEAAAAAAEVA2AAAGAEf3x/fwF8YAV/fH9/fwF8Ag8BA2VudgZtZW1vcnkCAAADBAMAAQIHUwMRX193YXNtX2NhbGxfY3RvcnMAABhzdGRsaWJfc3RyaWRlZF9kYXB4c3VtcHcAASBzdGRsaWJfc3RyaWRlZF9kYXB4c3VtcHdfbmRhcnJheQACCtwEAwMAAQscACAAIAEgAiADQQEgAGsgA2xBACADQQBMGxACC7gEAgt/CHwgAEEATARARAAAAAAAAAAADwsgA0UEQCABIAIgBEEDdGorAwCgIAC4og8LAkAgAEEHTQRAA0AgACAFRg0CIAVBAWohBSAQIAEgAiAEQQN0aisDAKCgIRAgAyAEaiEEDAALAAsgAEGAAU0EQCABIAIgBEEDdGoiBSADQThsIghqKwMAoCEQIAEgBSADQTBsIglqKwMAoCERIAEgBSADQShsIgpqKwMAoCESIAEgBSADQQV0IgtqKwMAoCETIAEgBSADQRhsIgxqKwMAoCEUIAEgBSADQQR0Ig1qKwMAoCEVIAEgBSADQQN0IgdqKwMAoCEWIABB+AFxIg5BAWshDyABIAUrAwCgIRdBCCEGA0AgBCAHaiEEIAYgDk9FBEAgECABIAIgBEEDdGoiBSAIaisDAKCgIRAgESABIAUgCWorAwCgoCERIBIgASAFIApqKwMAoKAhEiATIAEgBSALaisDAKCgIRMgFCABIAUgDGorAwCgoCEUIBUgASAFIA1qKwMAoKAhFSAWIAEgBSAHaisDAKCgIRYgBkEIaiEGIBcgASAFKwMAoKAhFwwBCwsgFyAWoCAVIBSgoCATIBKgIBEgEKCgoCEQIA9BeHFBCGohBQNAIAAgBUwNAiAFQQFqIQUgECABIAIgBEEDdGorAwCgoCEQIAMgBGohBAwACwALIABBAXZB+P///wNxIgUgASACIAMgBBACIAAgBWsgASACIAMgBCADIAVsahACoCEQCyAQCw==' );\n\n\n// EXPORTS //\n\nexport default wasm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport isWebAssemblyMemory from '@stdlib/assert-is-wasm-memory';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport inherits from '@stdlib/utils-inherit';\nimport WasmModule from '@stdlib/wasm-module-wrapper';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport wasmBinary from './binary.js';\n\n\n// MAIN //\n\n/**\n* BLAS routine WebAssembly module wrapper constructor.\n*\n* @constructor\n* @param {Object} memory - WebAssembly memory instance\n* @throws {TypeError} must provide a WebAssembly memory instance\n* @returns {Module} module instance\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var dapxsumpw = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* dapxsumpw.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float64';\n*\n* // Specify a vector length:\n* var N = 3;\n*\n* // Define a pointer (i.e., byte offset) for storing the input vector:\n* var xptr = 0;\n*\n* // Write vector values to module memory:\n* dapxsumpw.write( xptr, oneTo( N, dtype ) );\n*\n* // Perform computation:\n* var sum = dapxsumpw.main( N, 5.0, xptr, 1 );\n* // returns 21.0\n*/\nfunction Module( memory ) {\n\tif ( !( this instanceof Module ) ) {\n\t\treturn new Module( memory );\n\t}\n\tif ( !isWebAssemblyMemory( memory ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a WebAssembly memory instance. Value: `%s`.', memory ) );\n\t}\n\t// Call the parent constructor:\n\tWasmModule.call( this, wasmBinary, memory, {\n\t\t'env': {\n\t\t\t'memory': memory\n\t\t}\n\t});\n\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherits( Module, WasmModule );\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* @name main\n* @memberof Module.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NonNegativeInteger} xptr - input array pointer (i.e., byte offset)\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var dapxsumpw = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* dapxsumpw.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float64';\n*\n* // Specify a vector length:\n* var N = 3;\n*\n* // Define a pointer (i.e., byte offset) for storing the input vector:\n* var xptr = 0;\n*\n* // Write vector values to module memory:\n* dapxsumpw.write( xptr, oneTo( N, dtype ) );\n*\n* // Perform computation:\n* var sum = dapxsumpw.main( N, 5.0, xptr, 1 );\n* // returns 21.0\n*/\nsetReadOnly( Module.prototype, 'main', function dapxsumpw( N, alpha, xptr, strideX ) {\n\treturn this._instance.exports.stdlib_strided_dapxsumpw( N, alpha, xptr, strideX ); // eslint-disable-line max-len\n});\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using pairwise summation and alternative indexing semantics.\n*\n* @name ndarray\n* @memberof Module.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {NonNegativeInteger} xptr - input array pointer (i.e., byte offset)\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var dapxsumpw = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* dapxsumpw.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float64';\n*\n* // Specify a vector length:\n* var N = 3;\n*\n* // Define a pointer (i.e., byte offset) for storing the input vector:\n* var xptr = 0;\n*\n* // Write vector values to module memory:\n* dapxsumpw.write( xptr, oneTo( N, dtype ) );\n*\n* // Perform computation:\n* var sum = dapxsumpw.ndarray( N, 5.0, xptr, 1, 0 );\n* // returns 21.0\n*/\nsetReadOnly( Module.prototype, 'ndarray', function dapxsumpw( N, alpha, xptr, strideX, offsetX ) {\n\treturn this._instance.exports.stdlib_strided_dapxsumpw_ndarray( N, alpha, xptr, strideX, offsetX ); // eslint-disable-line max-len\n});\n\n\n// EXPORTS //\n\nexport default Module;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport inherits from '@stdlib/utils-inherit';\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport Memory from '@stdlib/wasm-memory';\nimport arrays2ptrs from '@stdlib/wasm-base-arrays2ptrs';\nimport strided2object from '@stdlib/wasm-base-strided2object';\nimport Module from './module.js';\n\n\n// MAIN //\n\n/**\n* Routine constructor.\n*\n* @private\n* @constructor\n* @returns {Routine} routine instance\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a new routine:\n* var dapxsumpw = new Routine();\n*\n* // Initialize the module:\n* dapxsumpw.initializeSync();\n*\n* // Define a strided array:\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* // Perform operation:\n* var sum = dapxsumpw.main( 3, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a new routine:\n* var dapxsumpw = new Routine();\n*\n* // Initialize the module:\n* dapxsumpw.initializeSync();\n*\n* // Define a strided array:\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* // Perform operation:\n* var sum = dapxsumpw.ndarray( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nfunction Routine() {\n\tif ( !( this instanceof Routine ) ) {\n\t\treturn new Routine();\n\t}\n\tModule.call( this, new Memory({\n\t\t'initial': 0\n\t}));\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherits( Routine, Module );\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using pairwise summation.\n*\n* @name main\n* @memberof Routine.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a new routine:\n* var dapxsumpw = new Routine();\n*\n* // Initialize the module:\n* dapxsumpw.initializeSync();\n*\n* // Define a strided array:\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* // Perform operation:\n* var sum = dapxsumpw.main( 3, 5.0, x, 1 );\n* // returns 16.0\n*/\nsetReadOnly( Routine.prototype, 'main', function dapxsumpw( N, alpha, x, strideX ) {\n\treturn this.ndarray( N, alpha, x, strideX, stride2offset( N, strideX ) );\n});\n\n/**\n* Adds a scalar constant to each double-precision floating-point strided array element and computes the sum using pairwise summation and alternative indexing semantics.\n*\n* @name ndarray\n* @memberof Routine.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} alpha - scalar constant\n* @param {Float64Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create a new routine:\n* var dapxsumpw = new Routine();\n*\n* // Initialize the module:\n* dapxsumpw.initializeSync();\n*\n* // Define a strided array:\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* // Perform operation:\n* var sum = dapxsumpw.ndarray( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nsetReadOnly( Routine.prototype, 'ndarray', function dapxsumpw( N, alpha, x, strideX, offsetX ) {\n\tvar ptrs;\n\tvar p0;\n\n\t// Convert the input arrays to \"pointers\" in the module's memory:\n\tptrs = arrays2ptrs( this, [\n\t\tstrided2object( N, x, strideX, offsetX )\n\t]);\n\tp0 = ptrs[ 0 ];\n\n\t// Perform computation by calling the corresponding parent method:\n\treturn Module.prototype.ndarray.call( this, N, alpha, p0.ptr, p0.stride, p0.offset );\n});\n\n\n// EXPORTS //\n\nexport default Routine;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Routine from './routine.js';\n\n\n// MAIN //\n\n/**\n* WebAssembly routine to add a scalar constant to each double-precision floating-point strided array element and compute the sum using pairwise summation.\n*\n* @name dapxsumpw\n* @type {Routine}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Define a strided array:\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* // Perform operation:\n* var v = dapxsumpw.main( 3, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Define a strided array:\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* // Perform operation:\n* var v = dapxsumpw.ndarray( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*/\nvar dapxsumpw = new Routine();\ndapxsumpw.initializeSync(); // eslint-disable-line node/no-sync\n\n\n// EXPORTS //\n\nexport default dapxsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* WebAssembly routine to add a scalar constant to each double-precision floating-point strided array element and compute the sum using pairwise summation.\n*\n* @module @stdlib/blas-ext-base-wasm-dapxsumpw\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import dapxsumpw from '@stdlib/blas-ext-base-wasm-dapxsumpw';\n*\n* // Define a strided array:\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n*\n* // Perform operation:\n* var v = dapxsumpw.main( 3, 5.0, x, 1 );\n* // returns 16.0\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import dapxsumpw from '@stdlib/blas-ext-base-wasm-dapxsumpw';\n*\n* // Define a strided array:\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* // Perform operation:\n* var v = dapxsumpw.ndarray( 4, 5.0, x, 2, 1 );\n* // returns 25.0\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n* import zeros from '@stdlib/array-zeros';\n* import dapxsumpw from '@stdlib/blas-ext-base-wasm-dapxsumpw';\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var mod = new dapxsumpw.Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* mod.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float64';\n*\n* // Specify a vector length:\n* var N = 3;\n*\n* // Define a pointer (i.e., byte offset) for storing the input vector:\n* var xptr = 0;\n*\n* // Write vector values to module memory:\n* mod.write( xptr, oneTo( N, dtype ) );\n*\n* // Perform computation:\n* var sum = mod.main( N, 5.0, xptr, 1 );\n* // returns 21.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport Module from './module.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'Module', Module );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"Module\": \"main.Module\" }\n"],"names":["wasm","base64ToUint8Array","Module","memory","this","isWebAssemblyMemory","TypeError","format","WasmModule","call","wasmBinary","env","Routine","Memory","initial","inherits","setReadOnly","prototype","N","alpha","xptr","strideX","_instance","exports","stdlib_strided_dapxsumpw","offsetX","stdlib_strided_dapxsumpw_ndarray","x","ndarray","stride2offset","p0","arrays2ptrs","strided2object","ptr","stride","offset","dapxsumpw","initializeSync","main"],"mappings":";;q7BA2BA,IAAIA,EAAOC,EAAoB,ggCCgD/B,SAASC,EAAQC,GAChB,KAAQC,gBAAgBF,GACvB,OAAO,IAAIA,EAAQC,GAEpB,IAAME,EAAqBF,GAC1B,MAAM,IAAIG,UAAWC,EAAQ,6EAA8EJ,IAS5G,OANAK,EAAWC,KAAML,KAAMM,EAAYP,EAAQ,CAC1CQ,IAAO,CACNR,OAAUA,KAILC,IACR,CChBA,SAASQ,IACR,OAAQR,gBAAgBQ,GAGxBV,EAAOO,KAAML,KAAM,IAAIS,EAAO,CAC7BC,QAAW,KAELV,MALC,IAAIQ,CAMb,CDWAG,EAAUb,EAAQM,GAgDlBQ,EAAad,EAAOe,UAAW,QAAQ,SAAoBC,EAAGC,EAAOC,EAAMC,GAC1E,OAAOjB,KAAKkB,UAAUC,QAAQC,yBAA0BN,EAAGC,EAAOC,EAAMC,EACzE,IAiDAL,EAAad,EAAOe,UAAW,WAAW,SAAoBC,EAAGC,EAAOC,EAAMC,EAASI,GACtF,OAAOrB,KAAKkB,UAAUC,QAAQG,iCAAkCR,EAAGC,EAAOC,EAAMC,EAASI,EAC1F,IC7GAV,EAAUH,EAASV,GA+BnBc,EAAaJ,EAAQK,UAAW,QAAQ,SAAoBC,EAAGC,EAAOQ,EAAGN,GACxE,OAAOjB,KAAKwB,QAASV,EAAGC,EAAOQ,EAAGN,EAASQ,EAAeX,EAAGG,GAC9D,IAgCAL,EAAaJ,EAAQK,UAAW,WAAW,SAAoBC,EAAGC,EAAOQ,EAAGN,EAASI,GACpF,IACIK,EASJ,OAHAA,EAHOC,EAAa3B,KAAM,CACzB4B,EAAgBd,EAAGS,EAAGN,EAASI,KAErB,GAGJvB,EAAOe,UAAUW,QAAQnB,KAAML,KAAMc,EAAGC,EAAOW,EAAGG,IAAKH,EAAGI,OAAQJ,EAAGK,OAC7E,IC7GG,IAACC,EAAY,IAAIxB,EACpBwB,EAAUC,iBCsCVrB,EAAAsB,EAAA,SAAApC"}